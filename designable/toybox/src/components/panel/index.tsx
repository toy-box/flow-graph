import React, { useCallback } from 'react';
import { useFlow } from '../../hooks';

const STAND_SIZE = 56;

export const Panel = () => {
  const flow = useFlow();
  const init = useCallback(() => {
    flow.setFlowNode([
      {
        id: '001',
        type: 'begin',
        width: STAND_SIZE,
        height: STAND_SIZE,
        targets: ['100'],
        component: 'StartNode',
      },
      {
        id: '100',
        type: 'forward',
        width: STAND_SIZE,
        height: STAND_SIZE,
        targets: ['200'],
      },
      // {
      //   id: '210',
      //   type: 'forward',
      //   width: STAND_SIZE,
      //   height: STAND_SIZE,
      //   targets: ['500'],
      // },
      {
        id: '500',
        type: 'forward',
        width: STAND_SIZE,
        height: STAND_SIZE,
        targets: ['220'],
        component: 'ExtendNode',
      },
      // {
      //   id: '211',
      //   type: 'forward',
      //   width: STAND_SIZE,
      //   height: STAND_SIZE,
      //   targets: ['600'],
      // },
      {
        id: '600',
        type: 'forward',
        width: STAND_SIZE,
        height: STAND_SIZE,
        targets: ['700'],
        component: 'ExtendNode',
      },
      {
        id: '200',
        type: 'forkBegin',
        forkEndTarget: '220',
        width: STAND_SIZE,
        height: STAND_SIZE,
        targets: ['500', '600'],
      },
      {
        id: '700',
        type: 'forkBegin',
        forkEndTarget: '1000',
        width: STAND_SIZE,
        height: STAND_SIZE,
        targets: ['800', '900'],
      },
      {
        id: '800',
        type: 'forward',
        width: STAND_SIZE,
        height: STAND_SIZE,
        targets: ['1000'],
        component: 'ExtendNode',
      },
      {
        id: '900',
        type: 'forward',
        width: STAND_SIZE,
        height: STAND_SIZE,
        targets: ['1000'],
        component: 'ExtendNode',
      },
      {
        id: '1000',
        type: 'forkEnd',
        width: STAND_SIZE,
        height: STAND_SIZE,
        targets: ['220'],
        component: 'ExtendNode',
      },
      {
        id: '220',
        type: 'forkEnd',
        width: STAND_SIZE,
        height: STAND_SIZE,
        targets: ['300'],
        component: 'ExtendNode',
      },
      {
        id: '300',
        type: 'forward',
        width: STAND_SIZE,
        height: STAND_SIZE,
        targets: ['310'],
      },
      {
        id: '310',
        type: 'cycleBegin',
        cycleBackTarget: '311',
        cycleEndTarget: '312',
        width: STAND_SIZE,
        height: STAND_SIZE,
        targets: ['311'],
      },
      {
        id: '311',
        type: 'cycleBack',
        width: STAND_SIZE,
        height: STAND_SIZE,
        targets: ['312'],
        component: 'ExtendNode',
      },
      {
        id: '312',
        type: 'cycleEnd',
        width: STAND_SIZE,
        height: STAND_SIZE,
        targets: ['400'],
        component: 'ExtendNode',
      },
      {
        id: '400',
        type: 'end',
        width: STAND_SIZE,
        height: STAND_SIZE,
        component: 'EndNode',
      },
    ]);
  }, [flow]);
  const update = useCallback(() => {
    flow.setFlowNode([
      {
        id: '001',
        type: 'begin',
        width: STAND_SIZE,
        height: STAND_SIZE,
        targets: ['100'],
        component: 'StartNode',
      },
      {
        id: '100',
        type: 'cycleBegin',
        cycleBackTarget: '101',
        cycleEndTarget: '102',
        width: STAND_SIZE,
        height: STAND_SIZE,
        targets: ['103'],
      },
      {
        id: '101',
        type: 'cycleBack',
        width: STAND_SIZE,
        height: STAND_SIZE,
        targets: ['102'],
        component: 'ExtendNode',
      },
      {
        id: '103',
        type: 'forward',
        width: STAND_SIZE,
        height: STAND_SIZE,
        targets: ['201'],
        component: 'ExtendNode',
      },
      {
        id: '201',
        type: 'forkBegin',
        forkEndTarget: '204',
        width: STAND_SIZE,
        height: STAND_SIZE,
        targets: ['202', '203'],
      },
      {
        id: '202',
        type: 'forward',
        width: STAND_SIZE,
        height: STAND_SIZE,
        targets: ['204'],
        component: 'ExtendNode',
      },
      {
        id: '203',
        type: 'forward',
        width: STAND_SIZE,
        height: STAND_SIZE,
        targets: ['211'],
        component: 'ExtendNode',
      },
      {
        id: '211',
        type: 'forkBegin',
        forkEndTarget: '214',
        width: STAND_SIZE,
        height: STAND_SIZE,
        targets: ['212', '213'],
      },
      {
        id: '212',
        type: 'forward',
        width: STAND_SIZE,
        height: STAND_SIZE,
        targets: ['214'],
        component: 'ExtendNode',
      },
      {
        id: '213',
        type: 'forward',
        width: STAND_SIZE,
        height: STAND_SIZE,
        targets: ['214'],
        component: 'ExtendNode',
      },
      {
        id: '214',
        type: 'forkEnd',
        width: STAND_SIZE,
        height: STAND_SIZE,
        targets: ['204'],
        component: 'ExtendNode',
      },
      {
        id: '204',
        type: 'forkEnd',
        width: STAND_SIZE,
        height: STAND_SIZE,
        targets: ['300'],
        component: 'ExtendNode',
      },
      {
        id: '300',
        type: 'cycleBegin',
        cycleBackTarget: '301',
        cycleEndTarget: '101',
        width: STAND_SIZE,
        height: STAND_SIZE,
        targets: ['301'],
      },
      {
        id: '301',
        type: 'cycleBack',
        width: STAND_SIZE,
        height: STAND_SIZE,
        targets: ['101'],
        component: 'ExtendNode',
      },
      {
        id: '102',
        type: 'cycleEnd',
        width: STAND_SIZE,
        height: STAND_SIZE,
        targets: ['400'],
        component: 'ExtendNode',
      },
      {
        id: '400',
        type: 'end',
        width: STAND_SIZE,
        height: STAND_SIZE,
        component: 'EndNode',
      },
    ]);
  }, []);
  return (
    <div>
      <button onClick={init}>init</button>
      <button onClick={update}>update</button>
    </div>
  );
};
